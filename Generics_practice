Import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class exchangePos {
public static final <T> void swap (T[] a, int i, int j) {
   T t = a[i];
   a[i] = a[j];
   a[j] = t;
}

public static final <T> void swap (List<T> l, int i, int j) {
    Collections.<T>swap(l, i, j);
}

private static void test() {

   String [] a = {"Hello", "Goodbye"};
   swap(a, 0, 1);
   System.out.println("a:"+Arrays.toString(a));

   List<String> l = new ArrayList<String>(Arrays.asList(a));
   swap(l, 0, 1);
   
   System.out.println("l:"+l);
}
    public static void main(String[] args) {
        test();
    }

}

OUTPUT

 

import java.util.ArrayList;

public class GenericStack <T>{
    // Empty array list
    ArrayList<T> A;

    // Default value of top variable when stack is empty
    int top = -1;
 
    // Variable to store size of array
    int size;

    GenericStack(int size)
    {
        // Storing the value of size into global variable
        this.size = size;
 
        // Creating array of Size = size
        this.A = new ArrayList<T>(size);
    }
   
    void push(T X)
    {
        // Checking if array is full
        if (top + 1 == size) {

            System.out.println("Stack Overflow");
        }
        else {
 
            top = top + 1;
 
            // Over-writing existing element
            if (A.size() > top)
                A.set(top, X);
 
            else
                // Creating new element
                A.add(X);
        }
    }

    void pop()
    {
        // If stack is empty
        if (top == -1) {
            // Display message when there are no elements in
            // the stack
            System.out.println("Stack Underflow");
        }
 
        else
            // Delete the last element
            // by decrementing the top
            top--;
    }

    boolean empty() { return top == -1; }

    // Method 5
    // To print the stack
    // @Override
    public String toString()
    {
 
        String Ans = "";
 
        for (int i = 0; i < top; i++) {
            Ans += String.valueOf(A.get(i)) + "->";
        }
 
        Ans += String.valueOf(A.get(top));
        return Ans;
    }
    
    public class specificProperty {
    public static <T extends Number> void coutMeth(T[] arr) {
        int countFactor = 0;
        int countPrime = 0;
        int oddCount = 0;
        int parCount = 0;

        for (T item : arr) {
            for (int i = 1; i <= item.intValue(); i++) {
                if (item.intValue() % i == 0) {
                    countFactor++;
                }
            }
            if (countFactor == 2) {
                countPrime++;
            }
            countFactor = 0;
            if (!(item.intValue() % 2 == 0)) {
                oddCount++;
            }
            int reminder, sum = 0, temp;
            temp = item.intValue();
            int temp2 = item.intValue();
            while (temp2 > 0) {
                reminder = temp2 % 10;
                sum = (sum * 10) + reminder;
                temp2 = temp2 / 10;
            }
            if (temp == sum) {
                parCount++;
            }
        }

        System.out.println("There are " + countPrime + " prime numbers");
        System.out.println("There are " + oddCount + " odd numbers");
        System.out.println("There are " + parCount);
    }

    public static void main(String[] args) {
        Integer a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 111 };

        coutMeth(a);

    }
}

    
    

    public static void main(String[] args) {
     
        GenericStack<Integer> s1 = new GenericStack<>(3);
        s1.push(10);
        s1.push(20);
        s1.push(30);

        System.out.println(
            "s1 after pushing 10, 20 and 30 :\n" + s1);
        s1.pop();
 
        System.out.println("s1 after pop :\n" + s1);
 
        System.out.println(s1.empty());
